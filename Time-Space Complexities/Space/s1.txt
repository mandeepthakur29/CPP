Space complexity is a measure of the amount of memory space required by an algorithm to execute as a function of the input size. 
It describes how the memory usage of an algorithm grows as the input size increases.

Similar to time complexity, space complexity is typically expressed using Big O notation, which provides an upper bound on the 
growth rate of the memory usage. It helps us understand how the memory requirements of an algorithm scale with the size of the 
input.

For example:

1.) An algorithm with a space complexity of O(1) means that its memory usage is constant, regardless of the input size.
2.) An algorithm with a space complexity of O(n) means that its memory usage grows linearly with the input size. If the input size 
    doubles, the memory usage also doubles.
3.) An algorithm with a space complexity of O(n^2) means that its memory usage grows quadratically with the input size. If the input 
    size doubles, the memory usage becomes four times as much.
4.) Space complexity is an important consideration, especially when dealing with large datasets or constrained memory environments. 
5.) It helps in analyzing the efficiency of algorithms in terms of memory usage and in making informed decisions about algorithm 
    design and optimization.